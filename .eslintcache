[{"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/index.js":"1","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/reportWebVitals.js":"2","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/api/api-manager.js":"3","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/App.jsx":"4","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/snackbars.jsx":"5","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/operation.jsx":"6","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/transactions.jsx":"7","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/transaction.jsx":"8","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/category.jsx":"9"},{"size":504,"mtime":1609384076206,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1609384076207,"results":"12","hashOfConfig":"11"},{"size":387,"mtime":1609384076204,"results":"13","hashOfConfig":"11"},{"size":2719,"mtime":1609384076203,"results":"14","hashOfConfig":"11"},{"size":511,"mtime":1609384076205,"results":"15","hashOfConfig":"11"},{"size":3260,"mtime":1609384076219,"results":"16","hashOfConfig":"11"},{"size":2373,"mtime":1609384076373,"results":"17","hashOfConfig":"11"},{"size":742,"mtime":1609384076205,"results":"18","hashOfConfig":"11"},{"size":1435,"mtime":1609384076204,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"telyll",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/index.js",[],"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/reportWebVitals.js",[],["43","44"],"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/api/api-manager.js",["45"],"import axios from 'axios'\n\nexport default  {\n    addTransaction: async transaction => await axios.post('http://localhost:3001/transaction',transaction),\n    getTransactions: async () => await axios.get('http://localhost:3001/transactions').then(data => data.data),\n    deleteTransaction: async id => await axios.delete(`http://localhost:3001/transaction/${id}`).then(status => status)\n}\n","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/App.jsx",["46"],"import './App.css';\nimport 'materialize-css/dist/css/materialize.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport {useEffect, useState} from 'react'\nimport Operations from './components/operation';\nimport CustomizedSnackbars from './components/snackbars';\nimport { BrowserRouter as Router,Route,Link} from 'react-router-dom'\nimport Transactions from './components/transactions';\nimport apiManager from './api/api-manager'\nimport Categories from './components/category';\n\n\n\nfunction App() {\n\n  //setUp\n  const [balance,setBalance] = useState(0)\n  const [transactions,setTransactions] = useState([])\n\n  const updateTransactions = () => apiManager.getTransactions().then(data => setTransactions(data))\n\n  useEffect(() => updateTransactions(),[])\n\n  useEffect(() => {\n    let sum = 0 \n    transactions.forEach(t => sum += t.amount)\n    setBalance(sum)\n\n  },[transactions])\n  //setUp\n\n  const deleteTrans = async id => {\n    await apiManager.deleteTransaction(id)\n    updateTransactions()\n  }\n\n  //snackBar \n  const [toShow,setToShow] = useState(false)\n  const [severity,setSeverity] = useState(\"\")\n  const [message,setMessage] = useState(\"\")\n\n  const alert = (s,t,ts) => {\n      setSeverity(s)\n      setMessage(t)\n      setToShow(ts)\n  }\n\n  const alertSuccess = msg=> alert(\"success\",msg,true)\n  const alertError = msg=> alert(\"error\",msg,true)\n\n  const handleClose = () => setToShow(false)\n  //snackBar \n\n  return (\n    <div>\n      <Router>\n        <div>\n            <nav>\n              <div className=\"nav-wrapper red lighten-1\">\n                <a className=\"brand-logo hide-on-small-and-down right\"><i className=\"fas fa-hand-holding-usd logo\"></i></a>\n                <ul id=\"nav-mobile\" className=\"left \">\n                  <li><span className=\"hide-on-small-and-down\">Balance:</span> {balance}$ </li>\n                  <li><Link to=\"/operations\">Operations</Link></li>\n                  <li><Link to=\"/transactions\">Transactions</Link></li>\n                  <li><Link to=\"/transactions/categories\">Categories</Link></li>\n\n                </ul>\n              </div>\n            </nav>\n          <Route path=\"/operations\" exact render={() => <Operations alert={[alertError,alertSuccess]} balance={balance} updateTransactions={updateTransactions}/>} />\n          <Route path=\"/transactions/categories\" exact render={() => <Categories transactions={transactions} deleteTrans={deleteTrans}/>} />\n          <Route path=\"/transactions\" exact render={() => <Transactions transactions={transactions} deleteTrans={deleteTrans}/>} />\n        </div>\n      </Router>\n      <CustomizedSnackbars severity={severity} toShow={toShow} message={message} handleClose={handleClose} />\n    </div>\n  );\n}\n\nexport default App;","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/snackbars.jsx",[],"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/operation.jsx",["47","48"],"import { useState } from 'react';\nimport apiManager from '../api/api-manager'\n\nfunction Operations(props) {\n    const {balance,updateTransactions} = props\n\n    //inputs\n    const [amount,setAmount] = useState(0)\n    const [category,setCategory] = useState(\"\")\n    const [vendor,setVendor] = useState(\"\")\n    const [date,setDate] = useState(\"\")\n    let type = 0\n\n    const inputSetters = {\n        amount: setAmount,\n        category: setCategory,\n        vendor: setVendor,\n        date: setDate\n    }\n\n    const inputHandler = e => {\n        const {value,name} = e.target\n        inputSetters[name](value.toLowerCase())\n    }\n    //inputs\n\n    const [alertError,alertSuccess] = props.alert\n\n    const error = msg => {\n        alertError(msg)\n        return false\n    }\n\n    const isValidInput = d => {\n        if(amount < 1)\n            return error(\"Amount cannot be negative or 0.\")\n\n        //will show insuficient funds only if the day of the transaction is today else its in the past so it can go under... i guess\n        const currentDate = new Date()\n        currentDate.setHours(0,0,0,0);\n        if(currentDate.getTime()  === d.getTime())\n            if(balance + (type * amount) < 0 && balance + (type * amount) < balance)\n                return error(\"Insufficient Funds.\")\n        if(category === \"\")\n            return error(\"Category can not be empty.\")\n        if(vendor === \"\")\n            return error(\"Vendor can not be empty.\")\n\n\n        return true\n    }\n\n\n    const addTrans = async () => {\n        const d = (date === \"\" ? new Date() : new Date(date))\n        d.setHours(0,0,0,0);\n        if(isValidInput(d)){\n            const status = await apiManager.addTransaction({\n                amount: (amount * type),\n                vendor,category,\n                date: d \n            })\n            if(status.status === 200){\n                alertSuccess(\"Transaction saved\")\n                updateTransactions()\n            }\n            else\n                alertError(`Error while saving ${status.status}`)\n        }\n    }\n\n    const deposit = () => {\n        type = 1\n        addTrans()\n    }\n    const withdraw = async () => {\n        type = -1\n        addTrans()\n    }\n\n  return (\n        <div className=\"row mid-page\">\n            <input className=\"col s12 l6 offset-l3 center\" name=\"amount\" placeholder=\"*Amount $\" type=\"number\" onChange={inputHandler}></input>\n            <input className=\"col s12 l6 offset-l3 center\" name=\"category\" placeholder=\"*Category\"  onChange={inputHandler}></input>\n            <input className=\"col s12 l6 offset-l3 center\" name=\"vendor\" placeholder=\"*Vendor\"  onChange={inputHandler}></input>\n            <input className=\"col s12 l6 offset-l3 center\"  id=\"date-input\" name=\"date\" type=\"date\" onChange={inputHandler}></input>\n            <div className=\"col s12 l6 offset-l3 center\" id=\"date-info\">Date of transaction(if untouched it will take current time)</div>\n            <div >\n                <a className=\"col s5 offset-s1 l2 offset-l4 waves-effect waves-light btn red darken-4\" onClick={deposit}>Deposit</a>\n                <a className=\"col s5 l2 waves-effect waves-light btn red darken-4\" onClick={withdraw}>Withdraw</a>\n            </div>\n        </div>\n  );\n}\n\nexport default Operations;\n","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/transactions.jsx",["49","50","51","52"],"import { useEffect, useState } from \"react\";\nimport M from 'materialize-css'\nimport Transaction from \"./transaction\";\n\n\nfunction Transactions(props) {\n    const {transactions,id} = props\n    const [transactionsFinal,setTransactionsFinal] = useState([])\n\n    const [month,setMonth] = useState(\"Month\")\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n    const filterByMonth = () => {\n        if(month === \"All\" || month === \"Month\")\n            setTransactionsFinal(transactions)\n        else\n            setTransactionsFinal(transactions.filter(t => {\n                const d = new Date(t.date)\n                const tMonth = d.getMonth() -1\n                return monthNames[tMonth] === month\n            }))\n    }\n    const monthPicker = e => {\n        const m = e.target.name\n        setMonth(m)\n    }\n\n    //useEffect\n    useEffect(() => {\n        const elems = document.querySelectorAll('.dropdown-trigger');\n        M.Dropdown.init(elems);\n    })\n    useEffect(() => setTransactionsFinal(transactions),[])\n    useEffect(() => filterByMonth(),[transactions])\n    useEffect(() => filterByMonth(),[month])\n    //useEffect\n\n    return (\n\n        <div>\n            <a className='dropdown-trigger btn red darken-4' href='#' data-target={id || \"drop1\"} >{month}</a>\n\n            <ul id={id || \"drop1\"} className='dropdown-content'>\n                <li><a href=\"#!\" className=\"red-text text-lighten-1\" onClick={monthPicker} name=\"All\">All</a></li>\n                {monthNames.map(m => <li><a href=\"#!\" className=\"red-text text-lighten-1\" onClick={monthPicker} name={m}>{m}</a></li>)}\n            </ul>\n            <table className=\"centered\">\n                <thead>\n                    <tr className=\"\">\n                        <th>Date</th>\n                        <th>Amount</th>\n                        <th>Category</th>\n                        <th>Vendor</th>\n                        <th></th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {transactionsFinal.map(t => <Transaction key={t._id} id={t._id} amount={t.amount} vendor={t.vendor} category={t.category} deleteTrans={props.deleteTrans} date={t.date}/>)}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Transactions;\n","/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/transaction.jsx",[],"/Users/asaid/Desktop/Excersize-Elevation/projects/bank/src/components/category.jsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":1,"nodeType":"59","endLine":7,"endColumn":2},{"ruleId":"60","severity":1,"message":"61","line":60,"column":17,"nodeType":"62","endLine":60,"endColumn":72},{"ruleId":"60","severity":1,"message":"61","line":89,"column":17,"nodeType":"62","endLine":89,"endColumn":122},{"ruleId":"60","severity":1,"message":"61","line":90,"column":17,"nodeType":"62","endLine":90,"endColumn":103},{"ruleId":"63","severity":1,"message":"64","line":34,"column":56,"nodeType":"65","endLine":34,"endColumn":58,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":35,"column":37,"nodeType":"65","endLine":35,"endColumn":51,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"67","line":36,"column":37,"nodeType":"65","endLine":36,"endColumn":44,"suggestions":"69"},{"ruleId":"60","severity":1,"message":"70","line":42,"column":13,"nodeType":"62","endLine":42,"endColumn":100},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'filterByMonth'. Either include it or remove the dependency array.",["74"],["75"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [transactions]",{"range":"82","text":"83"},"Update the dependencies array to be: [filterByMonth, transactions]",{"range":"84","text":"85"},"Update the dependencies array to be: [filterByMonth, month]",{"range":"86","text":"87"},[1116,1118],"[transactions]",[1156,1170],"[filterByMonth, transactions]",[1208,1215],"[filterByMonth, month]"]